{"version":3,"sources":["App.js","index.js"],"names":["App","useState","videoError","setVideoError","videoElement","useRef","canvasElement","devices","setDevices","currentDevice","setCurrentDevice","loop","setLoop","loading","setLoading","loadCoco","a","cocoSsd","model","setInterval","detectCoco","detect","current","predictions","width","videoWidth","height","videoHeight","ctx","getContext","drawCanvas","forEach","prediction","x","y","text","beginPath","color","strokeStyle","font","fillStyle","fillText","lineWidth","rect","stroke","useEffect","constrain","localStorage","getItem","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","mediaDevices","enumerateDevices","then","videoDevice","filter","device","kind","console","log","deviceId","audio","video","stream","srcObject","onloadedmetadata","play","err","name","clearInterval","className","role","ref","muted","autoPlay","onChange","e","target","value","setItem","map","label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8457923b.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\n\nfunction App() {\n    const [videoError, setVideoError] = useState(null);\n    const videoElement = useRef(null);\n    const canvasElement = useRef(null);\n    const [devices, setDevices] = useState([]);\n    const [currentDevice, setCurrentDevice] = useState(null);\n    const [loop, setLoop] = useState();\n    const [loading, setLoading] = useState(true);\n    const loadCoco = async () => {\n        const model = await cocoSsd.load();\n        setLoading(false);\n        setLoop(\n            setInterval(() => {\n                detectCoco(model);\n            }, 500)\n        );\n    };\n    const detectCoco = async (model) => {\n        const predictions = await model.detect(videoElement.current);\n        canvasElement.current.width = videoElement.current.videoWidth;\n        canvasElement.current.height = videoElement.current.videoHeight;\n        const ctx = canvasElement.current.getContext(\"2d\");\n        drawCanvas(predictions, ctx);\n    };\n    const drawCanvas = (predictions, ctx) => {\n        predictions.forEach((prediction) => {\n            let [x, y, width, height] = prediction[\"bbox\"];\n            let text = prediction[\"class\"];\n            ctx.beginPath();\n            let color = \"#ff002b\";\n            ctx.strokeStyle = color;\n            ctx.font = \"30px Nunito\";\n            ctx.fillStyle = color;\n            ctx.fillText(text, x, y - 15);\n            ctx.lineWidth = 5;\n            ctx.rect(x, y, width, height);\n            ctx.stroke();\n        });\n    };\n    useEffect(() => {\n        let constrain = {\n            width: 1280,\n            height: 720,\n        };\n        setCurrentDevice(localStorage.getItem(\"deviceId\"));\n        navigator.getUserMedia =\n            navigator.getUserMedia ||\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia;\n\n        if (navigator.getUserMedia) {\n            navigator.mediaDevices.enumerateDevices().then((devices) => {\n                const videoDevice = devices.filter(\n                    (device) => device.kind === \"videoinput\"\n                );\n                console.log(videoDevice);\n                setDevices(videoDevice);\n            });\n            console.log(currentDevice);\n            if (currentDevice) constrain.deviceId = currentDevice;\n            navigator.getUserMedia(\n                { audio: false, video: constrain },\n                (stream) => {\n                    let video = videoElement.current;\n                    video.srcObject = stream;\n                    video.onloadedmetadata = () => {\n                        video.play();\n                        loadCoco();\n                    };\n                },\n                (err) => {\n                    setVideoError(\"The following error occurred: \" + err.name);\n                    setLoading(false);\n                }\n            );\n        } else {\n            setVideoError(\"getUserMedia not supported\");\n            setLoading(false);\n        }\n        return () => {\n            clearInterval(loop);\n        };\n    }, [currentDevice, videoElement]);\n    const handleChange = (e) => {\n        clearInterval(loop);\n        let current = e.target.value;\n        setCurrentDevice(current);\n        localStorage.setItem(\"deviceId\", current);\n    };\n    return (\n        <div className=\"container py-3\">\n            <h3 className=\"text-center text-primary\">\n                Tensorflow Object Detection\n            </h3>\n            <p className=\"text-center text-color1\">\n                Simple ReactJs app integrated with object detection model name\n                COCO-SSD.\n            </p>\n            {videoError && (\n                <p className=\"text-danger text-center\">{videoError}</p>\n            )}\n            {loading && (\n                <div className=\"d-flex justify-content-center\">\n                    <div className=\"spinner-border text-primary\" role=\"status\">\n                        <span className=\"visually-hidden\">Loading...</span>\n                    </div>\n                </div>\n            )}\n            <div className={loading ? \"none\" : \"\"}>\n                <div className=\"video__container\">\n                    <video\n                        className=\"video__element\"\n                        ref={videoElement}\n                        muted={true}\n                        autoPlay\n                    ></video>\n                    <canvas\n                        className=\"canvas__element\"\n                        ref={canvasElement}\n                    ></canvas>\n                </div>\n                <div className=\"mb-3\">\n                    <label className=\"form-label text-color1\">\n                        Select your device\n                    </label>\n                    <select\n                        className=\"form-control\"\n                        onChange={handleChange}\n                        value={currentDevice ? currentDevice : \"\"}\n                    >\n                        {devices.map((device) => (\n                            <option\n                                key={device.deviceId}\n                                value={device.deviceId}\n                            >\n                                {device.label}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}